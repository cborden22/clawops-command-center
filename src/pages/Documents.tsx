import { useState } from "react"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group"
import { useToast } from "@/hooks/use-toast"
import { Plus, FileText, Download, Edit, Search } from "lucide-react"
import html2pdf from "html2pdf.js"

interface FormData {
  [key: string]: string
}

interface SavedDocument {
  id: string
  name: string
  template: string
  created: string
  status: "Signed" | "Pending" | "Draft"
  formData: FormData
}

export default function Documents() {
  const { toast } = useToast()
  const [searchTerm, setSearchTerm] = useState("")
  const [selectedTemplate, setSelectedTemplate] = useState<string | null>(null)
  const [formData, setFormData] = useState<FormData>({})
  const [paymentType, setPaymentType] = useState<"percentage" | "flat">("percentage")

  const templates = [
    {
      id: "location-agreement",
      title: "Location Agreement",
      description: "Professional 1-year claw machine placement agreement",
      fields: [
        "Agreement Date",
        "Provider Name", 
        "Provider Address",
        "Provider Contact Info",
        "Business Name",
        "Business Address", 
        "Business Contact Info",
        "Start Date",
        "End Date",
        "Payment Method",
        "Notice Period (Hours/Days)"
      ]
    },
    {
      id: "contract",
      title: "Service Contract", 
      description: "Full service and maintenance contract",
      fields: ["Client Name", "Service Level", "Monthly Fee", "Contract Start Date", "Terms"]
    },
    {
      id: "cold-call-script",
      title: "Cold Call Script",
      description: "Structured script for initial outreach",
      fields: ["Business Type", "Decision Maker", "Value Proposition", "Follow-up Actions"]
    },
    {
      id: "inventory-log",
      title: "Inventory Log",
      description: "Track machine inventory and supplies",
      fields: ["Machine ID", "Location", "Last Restocked", "Prize Inventory", "Revenue Collected"]
    }
  ]

  const [savedDocuments, setSavedDocuments] = useState<SavedDocument[]>([
    { 
      id: "1",
      name: "Downtown Arcade Agreement", 
      template: "Location Agreement", 
      created: "2024-01-15", 
      status: "Signed",
      formData: {}
    },
    { 
      id: "2",
      name: "Pizza Palace Contract", 
      template: "Service Contract", 
      created: "2024-01-14", 
      status: "Pending",
      formData: {}
    },
    { 
      id: "3",
      name: "Mall Kiosk Agreement", 
      template: "Location Agreement", 
      created: "2024-01-13", 
      status: "Draft",
      formData: {}
    }
  ])

  const filteredTemplates = templates.filter(template =>
    template.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
    template.description.toLowerCase().includes(searchTerm.toLowerCase())
  )

  const handleFormChange = (field: string, value: string) => {
    setFormData(prev => ({ ...prev, [field]: value }))
  }

  const generateLocationAgreementContent = () => {
    const currentDate = formData["Agreement Date"] || new Date().toLocaleDateString()
    const paymentDetails = paymentType === "percentage" 
      ? `${formData["Revenue Share Percentage"] || "[%]"}% of all revenue generated by the Machine(s)`
      : `$${formData["Flat Fee Amount"] || "[Amount]"} per month (flat fee)`

    return {
      title: "CLAW MACHINE PLACEMENT AGREEMENT",
      subtitle: "Standard 1-Year Term",
      content: `
        <div class="header-section">
          <h1>CLAW MACHINE PLACEMENT AGREEMENT</h1>
          <h2>Standard 1-Year Term</h2>
          <p class="effective-date">Effective Date: ${currentDate}</p>
        </div>

        <div class="parties-section">
          <h3>PARTIES TO THIS AGREEMENT</h3>
          <div class="party-block">
            <h4>Claw Machine Provider</h4>
            <p><strong>Name:</strong> ${formData["Provider Name"] || "[Provider Name]"}</p>
            <p><strong>Address:</strong> ${formData["Provider Address"] || "[Provider Address]"}</p>
            <p><strong>Contact:</strong> ${formData["Provider Contact Info"] || "[Contact Information]"}</p>
          </div>
          
          <div class="party-block">
            <h4>Business Location Owner</h4>
            <p><strong>Name:</strong> ${formData["Business Name"] || "[Business Name]"}</p>
            <p><strong>Address:</strong> ${formData["Business Address"] || "[Business Address]"}</p>
            <p><strong>Contact:</strong> ${formData["Business Contact Info"] || "[Contact Information]"}</p>
          </div>
          
          <p class="parties-note">Together referred to as "the Parties."</p>
        </div>

        <div class="terms-section">
          <div class="term-item">
            <h3>1. PURPOSE</h3>
            <p>The Provider agrees to place and operate one or more claw machines (the "Machine(s)") at the Location Owner's place of business. The Location Owner agrees to host the Machine(s) in exchange for compensation as outlined in Section 3.</p>
          </div>

          <div class="term-item">
            <h3>2. TERM</h3>
            <p>This Agreement is valid for <strong>12 months</strong>, beginning on <strong>${formData["Start Date"] || "[Start Date]"}</strong> and ending on <strong>${formData["End Date"] || "[End Date]"}</strong>, unless terminated earlier as outlined in Section 9.</p>
          </div>

          <div class="term-item highlight-section">
            <h3>3. COMPENSATION</h3>
            <p>The Provider will collect all revenue from the Machine(s) and compensate the Location Owner with:</p>
            <p class="compensation-detail"><strong>${paymentDetails}</strong></p>
            <p>Payments will be made by the <strong>10th of each month</strong> for the prior month's earnings via <strong>${formData["Payment Method"] || "[Payment Method]"}</strong>.</p>
          </div>

          <div class="term-item">
            <h3>4. RESPONSIBILITIES</h3>
            <div class="responsibility-grid">
              <div class="responsibility-column">
                <h4>Provider Responsibilities</h4>
                <ul>
                  <li>Owns all machines and their contents</li>
                  <li>Handles installation, restocking, and servicing</li>
                  <li>Covers all maintenance and repairs</li>
                  <li>Pays for electricity usage</li>
                  <li>Provides timely revenue reporting</li>
                </ul>
              </div>
              
              <div class="responsibility-column">
                <h4>Location Owner Responsibilities</h4>
                <ul>
                  <li>Provides accessible space for Machine(s)</li>
                  <li>Supplies power outlet near placement area</li>
                  <li>Maintains general cleanliness around machine</li>
                  <li>Ensures customer access during business hours</li>
                  <li>Cooperates with maintenance schedules</li>
                </ul>
              </div>
            </div>
          </div>

          <div class="term-item">
            <h3>5. THEFT, DAMAGE & COOPERATION</h3>
            <p>The Location Owner will not be held liable for theft, vandalism, or accidental damage to the Machine(s).</p>
            <p><strong>In the event of incidents, the Location Owner agrees to:</strong></p>
            <ul class="cooperation-list">
              <li>Provide available security footage, if applicable</li>
              <li>Allow access for inspection and assessment</li>
              <li>Cooperate with law enforcement or insurance representatives</li>
              <li>Notify Provider within 24 hours of any incidents</li>
            </ul>
          </div>

          <div class="term-item">
            <h3>6. INSURANCE & LIABILITY</h3>
            <p>The Provider is responsible for carrying comprehensive insurance for equipment and general liability. The Location Owner assumes no liability for injuries or damages related to the Machine(s), except in cases of gross negligence.</p>
          </div>

          <div class="term-item">
            <h3>7. MARKETING & SIGNAGE</h3>
            <p>The Provider may display branding and promotional signage on or immediately near the Machine(s). Any additional signage in other areas of the premises must receive prior written approval from the Location Owner.</p>
          </div>

          <div class="term-item">
            <h3>8. RELOCATION OR REMOVAL</h3>
            <p>The Provider may replace, relocate, or remove the Machine(s) with <strong>${formData["Notice Period (Hours/Days)"] || "[Notice Period]"}</strong> notice to the Location Owner. The Location Owner may request relocation of the machine within the business premises if operationally necessary.</p>
          </div>

          <div class="term-item">
            <h3>9. TERMINATION</h3>
            <p>Either party may terminate this Agreement with <strong>30 days' written notice</strong>. Immediate termination is permitted in the event of material breach that remains uncured after 7 days' written notice.</p>
          </div>

          <div class="term-item">
            <h3>10. RENEWAL</h3>
            <p>If neither party provides written notice of termination at least 30 days before the end date, this Agreement automatically renews for another 12-month term under the same conditions.</p>
          </div>

          <div class="term-item">
            <h3>11. ENTIRE AGREEMENT</h3>
            <p>This document represents the complete agreement between the Parties. Any amendments must be in writing and signed by both Parties. This Agreement supersedes all prior negotiations, understandings, or agreements.</p>
          </div>
        </div>

        <div class="signatures-section">
          <h3>SIGNATURES</h3>
          <div class="signature-grid">
            <div class="signature-block">
              <h4>Claw Machine Provider</h4>
              <p><strong>Name:</strong> ${formData["Provider Name"] || "[Provider Name]"}</p>
              <div class="signature-line">
                <p>Signature: _________________________________</p>
                <p>Date: ${currentDate}</p>
              </div>
            </div>

            <div class="signature-block">
              <h4>Business Location Owner</h4>
              <p><strong>Name:</strong> ${formData["Business Name"] || "[Business Name]"}</p>
              <div class="signature-line">
                <p>Signature: _________________________________</p>
                <p>Date: ${currentDate}</p>
              </div>
            </div>
          </div>
        </div>

        <div class="footer-section">
          <p>Document generated by ClawOps on ${new Date().toLocaleDateString()}</p>
        </div>
      `
    }
  }

  const handleDownloadPDF = async () => {
    const template = templates.find(t => t.id === selectedTemplate)
    if (!template) return

    try {
      let element: HTMLElement
      let filename = ""
      
      if (selectedTemplate === "location-agreement") {
        const agreementData = generateLocationAgreementContent()
        filename = `${formData["Business Name"] || "Location"}_Agreement_${new Date().toISOString().split('T')[0]}.pdf`
        
        // Create a simple, clean element for PDF generation
        element = document.createElement('div')
        element.style.cssText = `
          font-family: Arial, sans-serif;
          line-height: 1.6;
          color: #000;
          background: white;
          padding: 20px;
          max-width: 800px;
          font-size: 12px;
        `
        
        const currentDate = formData["Agreement Date"] || new Date().toLocaleDateString()
        const paymentDetails = paymentType === "percentage" 
          ? `${formData["Revenue Share Percentage"] || "[%]"}% of all revenue generated by the Machine(s)`
          : `$${formData["Flat Fee Amount"] || "[Amount]"} per month (flat fee)`

        element.innerHTML = `
          <div style="text-align: center; margin-bottom: 30px; border-bottom: 2px solid #000; padding-bottom: 20px;">
            <h1 style="font-size: 18px; margin: 0 0 10px 0; font-weight: bold;">CLAW MACHINE PLACEMENT AGREEMENT</h1>
            <h2 style="font-size: 14px; margin: 0 0 10px 0; font-weight: normal;">Standard 1-Year Term</h2>
            <p style="font-size: 12px; margin: 0;">Effective Date: ${currentDate}</p>
          </div>

          <div style="margin-bottom: 25px;">
            <h3 style="font-size: 14px; font-weight: bold; margin: 0 0 15px 0;">PARTIES TO THIS AGREEMENT</h3>
            
            <div style="margin-bottom: 15px; padding: 10px; border: 1px solid #ccc;">
              <h4 style="font-size: 12px; font-weight: bold; margin: 0 0 8px 0;">Claw Machine Provider</h4>
              <p style="margin: 3px 0;"><strong>Name:</strong> ${formData["Provider Name"] || "[Provider Name]"}</p>
              <p style="margin: 3px 0;"><strong>Address:</strong> ${formData["Provider Address"] || "[Provider Address]"}</p>
              <p style="margin: 3px 0;"><strong>Contact:</strong> ${formData["Provider Contact Info"] || "[Contact Information]"}</p>
            </div>
            
            <div style="margin-bottom: 15px; padding: 10px; border: 1px solid #ccc;">
              <h4 style="font-size: 12px; font-weight: bold; margin: 0 0 8px 0;">Business Location Owner</h4>
              <p style="margin: 3px 0;"><strong>Name:</strong> ${formData["Business Name"] || "[Business Name]"}</p>
              <p style="margin: 3px 0;"><strong>Address:</strong> ${formData["Business Address"] || "[Business Address]"}</p>
              <p style="margin: 3px 0;"><strong>Contact:</strong> ${formData["Business Contact Info"] || "[Contact Information]"}</p>
            </div>
            
            <p style="font-style: italic; margin: 10px 0 0 0;">Together referred to as "the Parties."</p>
          </div>

          <div style="margin-bottom: 20px;">
            <h3 style="font-size: 14px; font-weight: bold; margin: 0 0 10px 0;">1. PURPOSE</h3>
            <p style="margin: 0 0 15px 0;">The Provider agrees to place and operate one or more claw machines (the "Machine(s)") at the Location Owner's place of business. The Location Owner agrees to host the Machine(s) in exchange for compensation as outlined in Section 3.</p>
          </div>

          <div style="margin-bottom: 20px;">
            <h3 style="font-size: 14px; font-weight: bold; margin: 0 0 10px 0;">2. TERM</h3>
            <p style="margin: 0;">This Agreement is valid for <strong>12 months</strong>, beginning on <strong>${formData["Start Date"] || "[Start Date]"}</strong> and ending on <strong>${formData["End Date"] || "[End Date]"}</strong>, unless terminated earlier as outlined in Section 9.</p>
          </div>

          <div style="margin-bottom: 20px; padding: 15px; background: #f9f9f9; border: 1px solid #ddd;">
            <h3 style="font-size: 14px; font-weight: bold; margin: 0 0 10px 0;">3. COMPENSATION</h3>
            <p style="margin: 0 0 8px 0;">The Provider will collect all revenue from the Machine(s) and compensate the Location Owner with:</p>
            <p style="margin: 0 0 8px 0; font-weight: bold; font-size: 13px;">${paymentDetails}</p>
            <p style="margin: 0;">Payments will be made by the <strong>10th of each month</strong> for the prior month's earnings via <strong>${formData["Payment Method"] || "[Payment Method]"}</strong>.</p>
          </div>

          <div style="margin-bottom: 20px;">
            <h3 style="font-size: 14px; font-weight: bold; margin: 0 0 10px 0;">4. RESPONSIBILITIES</h3>
            
            <div style="margin-bottom: 15px;">
              <h4 style="font-size: 12px; font-weight: bold; margin: 0 0 8px 0;">Provider Responsibilities</h4>
              <ul style="margin: 0; padding-left: 20px;">
                <li>Owns all machines and their contents</li>
                <li>Handles installation, restocking, and servicing</li>
                <li>Covers all maintenance and repairs</li>
                <li>Pays for electricity usage</li>
                <li>Provides timely revenue reporting</li>
              </ul>
            </div>
            
            <div style="margin-bottom: 15px;">
              <h4 style="font-size: 12px; font-weight: bold; margin: 0 0 8px 0;">Location Owner Responsibilities</h4>
              <ul style="margin: 0; padding-left: 20px;">
                <li>Provides accessible space for Machine(s)</li>
                <li>Supplies power outlet near placement area</li>
                <li>Maintains general cleanliness around machine</li>
                <li>Ensures customer access during business hours</li>
                <li>Cooperates with maintenance schedules</li>
              </ul>
            </div>
          </div>

          <div style="margin-bottom: 20px;">
            <h3 style="font-size: 14px; font-weight: bold; margin: 0 0 10px 0;">5. THEFT, DAMAGE & COOPERATION</h3>
            <p style="margin: 0 0 8px 0;">The Location Owner will not be held liable for theft, vandalism, or accidental damage to the Machine(s).</p>
            <p style="margin: 0 0 8px 0; font-weight: bold;">In the event of incidents, the Location Owner agrees to:</p>
            <ul style="margin: 0; padding-left: 20px;">
              <li>Provide available security footage, if applicable</li>
              <li>Allow access for inspection and assessment</li>
              <li>Cooperate with law enforcement or insurance representatives</li>
              <li>Notify Provider within 24 hours of any incidents</li>
            </ul>
          </div>

          <div style="margin-bottom: 20px;">
            <h3 style="font-size: 14px; font-weight: bold; margin: 0 0 10px 0;">6. TERMINATION</h3>
            <p style="margin: 0;">Either party may terminate this agreement with 30 days written notice.</p>
          </div>

          <div style="margin-top: 40px; border-top: 1px solid #000; padding-top: 20px;">
            <h3 style="font-size: 14px; font-weight: bold; margin: 0 0 20px 0;">SIGNATURES</h3>
            
            <div style="display: flex; justify-content: space-between; margin-top: 40px;">
              <div style="width: 45%;">
                <div style="border-bottom: 1px solid #000; margin-bottom: 5px; height: 20px;"></div>
                <p style="font-size: 10px; margin: 0;"><strong>Provider Signature</strong></p>
                <p style="font-size: 10px; margin: 5px 0 0 0;">Date: _______________</p>
              </div>
              
              <div style="width: 45%;">
                <div style="border-bottom: 1px solid #000; margin-bottom: 5px; height: 20px;"></div>
                <p style="font-size: 10px; margin: 0;"><strong>Location Owner Signature</strong></p>
                <p style="font-size: 10px; margin: 5px 0 0 0;">Date: _______________</p>
              </div>
            </div>
          </div>

          <div style="margin-top: 30px; text-align: center; font-size: 10px; color: #666;">
            <p style="margin: 0;">Generated on ${new Date().toLocaleDateString()} by ClawOps Document Creator</p>
          </div>
        `
        
      } else {
        // For other templates, use simple format
        filename = `${formData["Client Name"] || formData["Business Name"] || "Document"}_${template.title.replace(/\s+/g, '_')}_${new Date().toISOString().split('T')[0]}.pdf`
        
        element = document.createElement('div')
        element.style.cssText = `
          font-family: Arial, sans-serif;
          line-height: 1.6;
          color: #000;
          background: white;
          padding: 20px;
          max-width: 800px;
        `
        
        const content = Object.entries(formData)
          .filter(([key, value]) => value.trim())
          .map(([key, value]) => `${key}: ${value}`)
          .join('\n')

        element.innerHTML = `
          <h1 style="text-align: center; color: #2563eb; margin-bottom: 20px;">${template.title}</h1>
          <pre style="font-family: Arial, sans-serif; white-space: pre-wrap; line-height: 1.6;">${content}

Generated on: ${new Date().toLocaleDateString()}
ClawOps Document Creator</pre>
        `
      }

      // Add element to body temporarily for rendering
      element.style.position = 'absolute'
      element.style.left = '0'
      element.style.top = '0'
      element.style.visibility = 'hidden'
      document.body.appendChild(element)

      // Simple PDF options that work reliably
      const opt = {
        margin: 10,
        filename: filename,
        image: { type: 'jpeg', quality: 0.98 },
        html2canvas: { scale: 2 },
        jsPDF: { unit: 'mm', format: 'a4', orientation: 'portrait' }
      }

      // Generate PDF
      await html2pdf().from(element).set(opt).save()

      // Clean up
      document.body.removeChild(element)

      toast({
        title: "PDF Downloaded Successfully",
        description: `${template.title} has been saved to your downloads folder.`,
      })

    } catch (error) {
      console.error('PDF generation error:', error)
      toast({
        title: "PDF Generation Failed",
        description: "There was an error generating the PDF. Please try again.",
        variant: "destructive"
      })
    }
  }

  const handleSaveDraft = () => {
    const template = templates.find(t => t.id === selectedTemplate)
    if (!template) return

    const businessName = formData["Business Name"] || formData["Client Name"] || "Untitled"
    const newDocument: SavedDocument = {
      id: Date.now().toString(),
      name: `${businessName} ${template.title}`,
      template: template.title,
      created: new Date().toISOString().split('T')[0],
      status: "Draft",
      formData: { ...formData }
    }

    setSavedDocuments(prev => [newDocument, ...prev])
    
    toast({
      title: "Draft Saved",
      description: `Document saved as draft successfully.`,
    })
  }

  const handleNewDocument = () => {
    setSelectedTemplate(null)
    setFormData({})
    setPaymentType("percentage")
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold text-foreground">Document Creator</h1>
          <p className="text-muted-foreground mt-2">
            Create and manage business documents with smart templates
          </p>
        </div>
        <Button 
          className="bg-gradient-primary hover:bg-primary/90"
          onClick={handleNewDocument}
        >
          <Plus className="h-4 w-4 mr-2" />
          New Document
        </Button>
      </div>

      {/* Search */}
      <div className="relative">
        <Search className="absolute left-3 top-3 h-4 w-4 text-muted-foreground" />
        <Input
          placeholder="Search templates..."
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
          className="pl-10"
        />
      </div>

      <div className="grid gap-6 lg:grid-cols-3">
        {/* Template Selection */}
        <div className="lg:col-span-1 space-y-4">
          <h2 className="text-xl font-semibold">Templates</h2>
          {filteredTemplates.map((template) => (
            <Card 
              key={template.id}
              className={`cursor-pointer transition-smooth hover:shadow-hover ${
                selectedTemplate === template.id ? 'ring-2 ring-primary bg-accent/50' : ''
              }`}
              onClick={() => setSelectedTemplate(template.id)}
            >
              <CardHeader className="pb-3">
                <CardTitle className="text-base flex items-center gap-2">
                  <FileText className="h-4 w-4" />
                  {template.title}
                </CardTitle>
                <CardDescription className="text-sm">
                  {template.description}
                </CardDescription>
              </CardHeader>
            </Card>
          ))}
        </div>

        {/* Document Editor */}
        <div className="lg:col-span-2">
          {selectedTemplate ? (
            <Card className="shadow-card">
              <CardHeader>
                <CardTitle>
                  {templates.find(t => t.id === selectedTemplate)?.title}
                </CardTitle>
                <CardDescription>
                  Fill in the required information to generate your document
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                {templates.find(t => t.id === selectedTemplate)?.fields.map((field) => (
                  <div key={field} className="space-y-2">
                    <Label htmlFor={field.toLowerCase().replace(' ', '-')}>
                      {field}
                    </Label>
                    {field.toLowerCase().includes('terms') || field.toLowerCase().includes('actions') ? (
                      <Textarea
                        id={field.toLowerCase().replace(' ', '-')}
                        placeholder={`Enter ${field.toLowerCase()}...`}
                        className="min-h-20"
                        value={formData[field] || ""}
                        onChange={(e) => handleFormChange(field, e.target.value)}
                      />
                    ) : (
                      <Input
                        id={field.toLowerCase().replace(' ', '-')}
                        placeholder={`Enter ${field.toLowerCase()}...`}
                        value={formData[field] || ""}
                        onChange={(e) => handleFormChange(field, e.target.value)}
                      />
                    )}
                  </div>
                ))}

                {/* Payment Type Selection for Location Agreement */}
                {selectedTemplate === "location-agreement" && (
                  <div className="space-y-4 border-t pt-4">
                    <Label className="text-base font-semibold">Payment Structure</Label>
                    <RadioGroup 
                      value={paymentType} 
                      onValueChange={(value: "percentage" | "flat") => setPaymentType(value)}
                      className="space-y-3"
                    >
                      <div className="flex items-center space-x-2">
                        <RadioGroupItem value="percentage" id="percentage" />
                        <Label htmlFor="percentage" className="cursor-pointer">
                          Revenue Share Percentage
                        </Label>
                      </div>
                      <div className="flex items-center space-x-2">
                        <RadioGroupItem value="flat" id="flat" />
                        <Label htmlFor="flat" className="cursor-pointer">
                          Flat Monthly Fee
                        </Label>
                      </div>
                    </RadioGroup>

                    {/* Conditional Input Fields */}
                    {paymentType === "percentage" ? (
                      <div className="space-y-2">
                        <Label htmlFor="revenue-share">Revenue Share Percentage (%)</Label>
                        <Input
                          id="revenue-share"
                          type="number"
                          min="0"
                          max="100"
                          placeholder="e.g., 50"
                          value={formData["Revenue Share Percentage"] || ""}
                          onChange={(e) => handleFormChange("Revenue Share Percentage", e.target.value)}
                        />
                      </div>
                    ) : (
                      <div className="space-y-2">
                        <Label htmlFor="flat-fee">Monthly Flat Fee ($)</Label>
                        <Input
                          id="flat-fee"
                          type="number"
                          min="0"
                          placeholder="e.g., 500"
                          value={formData["Flat Fee Amount"] || ""}
                          onChange={(e) => handleFormChange("Flat Fee Amount", e.target.value)}
                        />
                      </div>
                    )}
                  </div>
                )}
                
                <div className="flex gap-3 pt-4">
                  <Button 
                    className="bg-gradient-primary hover:bg-primary/90"
                    onClick={handleDownloadPDF}
                    disabled={!formData || Object.keys(formData).length === 0}
                  >
                    <Download className="h-4 w-4 mr-2" />
                    Generate PDF
                  </Button>
                  <Button 
                    variant="outline"
                    onClick={handleSaveDraft}
                  >
                    <Edit className="h-4 w-4 mr-2" />
                    Save as Draft
                  </Button>
                </div>
              </CardContent>
            </Card>
          ) : (
            <Card className="shadow-card h-96 flex items-center justify-center">
              <div className="text-center text-muted-foreground">
                <FileText className="h-12 w-12 mx-auto mb-4 opacity-50" />
                <p>Select a template to start creating your document</p>
              </div>
            </Card>
          )}
        </div>
      </div>

      {/* Saved Documents */}
      <Card className="shadow-card">
        <CardHeader>
          <CardTitle>Recent Documents</CardTitle>
          <CardDescription>
            Your saved and generated documents
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="space-y-3">
            {savedDocuments.map((doc) => (
              <div key={doc.id} className="flex items-center justify-between p-3 rounded-lg border hover:bg-accent/50 transition-smooth">
                <div className="flex items-center gap-3">
                  <FileText className="h-5 w-5 text-muted-foreground" />
                  <div>
                    <p className="font-medium">{doc.name}</p>
                    <p className="text-sm text-muted-foreground">{doc.template} • {doc.created}</p>
                  </div>
                </div>
                <div className="flex items-center gap-3">
                  <span className={`px-2 py-1 rounded-full text-xs font-medium ${
                    doc.status === 'Signed' ? 'bg-green-100 text-green-700' :
                    doc.status === 'Pending' ? 'bg-yellow-100 text-yellow-700' :
                    'bg-gray-100 text-gray-700'
                  }`}>
                    {doc.status}
                  </span>
                  <Button 
                    variant="ghost" 
                    size="sm"
                    onClick={() => {
                      toast({
                        title: "Document Downloaded",
                        description: `${doc.name} has been downloaded.`,
                      })
                    }}
                  >
                    <Download className="h-4 w-4" />
                  </Button>
                </div>
              </div>
            ))}
          </div>
        </CardContent>
      </Card>
    </div>
  )
}